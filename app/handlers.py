from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.types import Message, InputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import re
import logging
import app.keyboards as kb
import app.database.requests as rq

router = Router()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏
class Register(StatesGroup):
    date = State()
    time = State()
    number_of_guests = State()
    name = State()
    number = State()
    confirm = State()
# –¥–ª—è –æ—Ç–º–µ–Ω—ã
class CancelReservation(StatesGroup):
    name = State()
    date = State()
    time = State()
    number_of_guests = State()
    confirm_cancel = State()
# –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
class Edit(StatesGroup):
    date = State()
    time = State()
    number_of_guests = State()
    name = State()
    number = State()
    confirm = State()
#------------------------------------------------------------------------MENU--------------------------
@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id, username=message.from_user.username)
    photo = 'https://i.pinimg.com/564x/b9/88/30/b98830c39bce2aa77a507944b488589b.jpg'
    await message.answer_photo(photo)
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤  ü§©!", reply_markup=kb.main)

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏")

@router.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def process_contacts(message: Message):
    contact_info = (
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +1234567890\n"
        "‚úâÔ∏è Email: example@example.com\n"
        "üåê –í–µ–±—Å–∞–π—Ç: www.example.com"
    )
    await message.answer(contact_info)

@router.message(F.text == '–û –Ω–∞—Å')
async def process_about(message: Message):
    contact_info = "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è***"
    await message.answer(contact_info)

@router.callback_query(lambda c: c.data == 'back')
async def process_back_button(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()
    await callback_query.message.answer(
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=kb.main
    )







# -----------------------------------------------------------------–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï–ï–ï

@router.message(F.text == "–ë—Ä–æ–Ω—å")
async def register_date(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º  :)", reply_markup=kb.main_without_bron)
    await state.set_state(Register.date)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=kb.generate_date_buttons())


@router.callback_query(lambda c: c.data and c.data.startswith("date:"))
async def register_date_callback(callback: CallbackQuery, state: FSMContext):
    if await state.get_state() == Register.date.state or await state.get_state() == Edit.date.state:
        day = int(callback.data.split(":")[1])
        date = (datetime.now().date() + timedelta(days=day)).strftime('%d-%m-%Y')
        await state.update_data(date=date)
        await state.set_state(Register.time)
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=kb.generate_time_buttons())
        await callback.answer()
    else:
        await confirm_reservation(callback.message, state)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        await state.set_state(Edit.confirm)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await callback.answer()


@router.callback_query(Register.time)
async def register_time_callback(callback: CallbackQuery, state: FSMContext):
    if await state.get_state() == Register.time.state or await state.get_state() == Edit.time.state:
        hour = int(callback.data.split(":")[1])
        time = f"{hour:02d}:00"
        await state.update_data(time=time)
        await state.set_state(Register.number_of_guests)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:')
        await callback.answer()
    else:
        await confirm_reservation(callback.message, state)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        await state.set_state(Edit.confirm)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await callback.answer()


@router.message(Register.number_of_guests)
async def register_number_of_guests(message: Message, state: FSMContext):
    if message.text.isdigit():
        number_of_guests = int(message.text)
        data = await state.get_data()

        try:
            reservation_time = datetime.strptime(f"{data['time']} {data['date']}", "%H:%M %d-%m-%Y")
            suitable_table = await rq.find_suitable_table(number_of_guests, reservation_time)

            if suitable_table:
                await state.update_data(number_of_guests=number_of_guests)
                await state.set_state(Register.name)
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
            else:
                await message.answer(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                )
                await state.finish()
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            await state.clear()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')


@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.number)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7 –∏–ª–∏ 8 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä):',
                         reply_markup=kb.get_number)


@router.message(Register.number)
async def register_phone_number(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number if message.contact else message.text

    if re.match(r'^\+7\d{10}$|^8\d{10}$', phone_number):
        await state.update_data(number=phone_number)
        data = await state.get_data()

        reservation_datetime = datetime.strptime(f"{data['time']} {data['date']}", "%H:%M %d-%m-%Y")

        confirmation_text = (
            f'–í–∞—à–µ –∏–º—è: {data["name"]}\n'
            f'–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data["date"]}\n'
            f'–í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data["time"]}\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {data["number_of_guests"]}\n'
            f'–ù–æ–º–µ—Ä: {data["number"]}\n\n'
            f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ—Ä–Ω–∞?'
        )

        await state.set_state(Register.confirm)
        await message.answer(confirmation_text, reply_markup=kb.confirmation_buttons())
    else:
        await message.answer(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX.')


@router.callback_query(lambda c: c.data and c.data.startswith("confirm:"))
async def process_confirmation(callback: CallbackQuery, state: FSMContext):
    if callback.data == "confirm:yes":
        data = await state.get_data()

        reservation_datetime = datetime.strptime(f"{data['time']} {data['date']}", "%H:%M %d-%m-%Y")
        await rq.create_reservation(
            user_tg_id=callback.from_user.id,
            number_of_guests=int(data['number_of_guests']),
            reservation_time=reservation_datetime,
            reservation_name=str(data['name'])
        )

        await callback.message.answer("–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",reply_markup=kb.main)

        photo_url = 'https://i.pinimg.com/236x/a1/32/25/a132254161a11046bcce670316e6c43d.jpg'
        await callback.message.bot.send_photo(
            chat_id=callback.message.chat.id,  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
            photo=photo_url,
            caption='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! –ú—ã –∂–¥–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ üòä'
        )

        await state.clear()

    elif callback.data == "confirm:no":
        await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb.correction_buttons())
        await callback.answer()


# @router.callback_query(lambda c: c.data and c.data.startswith("correct:"))
# async def process_correction(callback: CallbackQuery, state: FSMContext):
#     correction_type = callback.data.split(":")[1]
#
#     if correction_type == "date":
#         await state.set_state(Register.date)
#         await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=kb.generate_date_buttons())
#     elif correction_type == "time":
#         await state.set_state(Register.time)
#         await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=kb.generate_time_buttons())
#     elif correction_type == "guests":
#         await state.set_state(Register.number_of_guests)
#         await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:')
#     elif correction_type == "name":
#         await state.set_state(Register.name)
#         await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
#     elif correction_type == "number":
#         await state.set_state(Register.number)
#         await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)
#
#     await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("correct:"))
async def process_correction(callback: CallbackQuery, state: FSMContext):
    correction_type = callback.data.split(":")[1]
    await state.update_data(correction_type=correction_type)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è

    if correction_type == "date":
        await state.set_state(Edit.date)
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=kb.generate_date_buttons())
    elif correction_type == "time":
        await state.set_state(Edit.time)
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=kb.generate_time_buttons())
    elif correction_type == "guests":
        await state.set_state(Edit.number_of_guests)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:')
    elif correction_type == "name":
        await state.set_state(Edit.name)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
    elif correction_type == "number":
        await state.set_state(Edit.number)
        await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)

    await callback.answer()

@router.message(Edit.date)
async def edit_date(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(date=datetime.strptime(message.text, "%d-%m-%Y").date())
        await confirm_reservation(message, state)
        await state.set_state(Edit.confirm)

@router.callback_query(Edit.time)
async def edit_time(callback: CallbackQuery, state: FSMContext):
    if await state.get_state() == Edit.time.state:
        hour = int(callback.data.split(":")[1])
        time = f"{hour:02d}:00"
        await state.update_data(time=time)
        await confirm_reservation(callback.message, state)
        await state.set_state(Edit.confirm)

@router.message(Edit.number_of_guests)
async def edit_number_of_guests(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(number_of_guests=int(message.text))
        await confirm_reservation(message, state)
        await state.set_state(Edit.confirm)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')

@router.message(Edit.name)
async def edit_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await confirm_reservation(message, state)
    await state.set_state(Edit.confirm)

@router.message(Edit.number)
async def edit_number(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number if message.contact else message.text

    if re.match(r'^\+7\d{10}$|^8\d{10}$', phone_number):
        await state.update_data(number=phone_number)
        await confirm_reservation(message, state)
        await state.set_state(Edit.confirm)
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX.')




async def confirm_reservation(message: Message, state: FSMContext):
    data = await state.get_data()
    confirmation_text = (
        f'–í–∞—à–µ –∏–º—è: {data["name"]}\n'
        f'–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data["date"]}\n'
        f'–í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data["time"]}\n'
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {data["number_of_guests"]}\n'
        f'–ù–æ–º–µ—Ä: {data["number"]}\n\n'
        f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ—Ä–Ω–∞?'
    )

    await message.answer(confirmation_text, reply_markup=kb.confirmation_buttons())





#--------------------------------------------------------------------------–û–¢–ú–ï–ù–ê----------------------------------
@router.message(F.text == '–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏')
async def cancel_reservation_start(message: Message, state: FSMContext):
    await message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –±—Ä–æ–Ω—å:",reply_markup=kb.main_without_bron)
    await state.set_state(CancelReservation.name)

# –í–≤–æ–¥ –∏–º–µ–Ω–∏
@router.message(CancelReservation.name)
async def cancel_reservation_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: –¥–¥-–º–º-–≥–≥–≥–≥):")
    await state.set_state(CancelReservation.date)

# –í–≤–æ–¥ –¥–∞—Ç—ã
@router.message(CancelReservation.date)
async def cancel_reservation_date(message: Message, state: FSMContext):
    try:
        reservation_date = datetime.strptime(message.text, "%d-%m-%Y").date()
        await state.update_data(date=reservation_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: —á—á:–º–º):", reply_markup = kb.generate_time_buttons())
        await state.set_state(CancelReservation.time)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥.")

# –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(CancelReservation.time)
async def cancel_reservation_time_callback(callback: CallbackQuery, state: FSMContext):

    try:
        if await state.get_state() == CancelReservation.time.state:
            hour = int(callback.data.split(":")[1])
            time_str = f"{hour:02d}:00"

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime.time
            time_obj = datetime.strptime(time_str, '%H:%M').time()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(time=time_obj)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:")
        await state.set_state(CancelReservation.number_of_guests)

    except ValueError:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º.")


@router.message(CancelReservation.number_of_guests)
async def cancel_reservation_confirm(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(number_of_guests=int(message.text))
        await state.set_state(CancelReservation.confirm_cancel)

        data = await state.get_data()
        if 'date' not in data or 'time' not in data:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        reservation_datetime = datetime.combine(data['date'], data['time']).strftime("%Y-%m-%d %H:%M:%S")


        confirmation_cancel_text = (
            f'–í–∞—à–µ –∏–º—è: {data["name"]}\n'
            f'–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data["date"].strftime("%d-%m-%Y")}\n'
            f'–í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data["time"].strftime("%H:%M")}\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {data["number_of_guests"]}\n\n'
            f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ—Ä–Ω–∞?'
        )
        await message.answer(confirmation_cancel_text, reply_markup=kb.cancel_buttons())
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')


@router.callback_query(lambda c: c.data and c.data.startswith("cancel:"))
async def cancel_reservation_callback(callback: CallbackQuery, state: FSMContext):
    if callback.data == "cancel:yes":
        data = await state.get_data()
        reservation_datetime = datetime.combine(data['date'], data['time']).strftime("%Y-%m-%d %H:%M:%S")
        try:
            result = await rq.cancel_reservation(
                user_tg_id=callback.from_user.id,
                reservation_time=reservation_datetime,
                number_of_guests=int(data['number_of_guests']),
                reservation_name=str(data['name'])
            )

            if result:
                await callback.message.answer("–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                await callback.message.answer("–ñ–¥–µ–º –≤–∞—Å –≤ –≥–æ—Å—Ç–∏ :)",reply_markup=kb.main)

            else:
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        except ValueError as e:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        except Exception as e:
    # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
    elif callback.data == "cancel:no":
        await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb.correction_buttons())
        await callback.answer()
